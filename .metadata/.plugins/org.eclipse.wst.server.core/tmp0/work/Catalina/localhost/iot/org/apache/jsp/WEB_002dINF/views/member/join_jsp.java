/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-04-20 01:00:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/STUDY_SPRING/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/iot/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1676520927963L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table tr td{ text-align: left }\r\n");
      out.write("[name=address] { margin-top: 3px }\r\n");
      out.write("th span, p span { color:#ff0000; margin-right: 5px; }\r\n");
      out.write("p { margin: 10px auto;  text-align: right;}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>회원가입</h3>\r\n");
      out.write("<p class='w-px600'><span>*</span>는 필수입력항목입니다</p>\r\n");
      out.write("<!-- \r\n");
      out.write("파일을 전송하는 경우 주의점\r\n");
      out.write("1. form태그 전송방식을  반드시 post 로 지정\r\n");
      out.write("2. 첨부파일전송형식지정: enctype=\"multipart/form-data\"\r\n");
      out.write(" -->\r\n");
      out.write("<form method='post' action='join' enctype=\"multipart/form-data\">\r\n");
      out.write("<table class='w-px600'>\r\n");
      out.write("<tr><th class='w-px140'><span>*</span>이름</th>\r\n");
      out.write("	<td><input type='text' name='name'> </td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th><span>*</span>아이디</th>\r\n");
      out.write("	<td><input type='text' class='chk' name='id'>\r\n");
      out.write("		<a class='btn-fill btn-id'>아이디중복확인</a>\r\n");
      out.write("		<div class='invalid'>아이디를 입력하세요(영문소문자,숫자만 가능)</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th><span>*</span>비밀번호</th>\r\n");
      out.write("	<td><input type='password' class='chk' name='pw'>\r\n");
      out.write("		<div class='invalid'>비밀번호를 입력하세요(영문대/소문자,숫자 모두 포함)</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th><span>*</span>비밀번호 확인</th>\r\n");
      out.write("	<td><input type='password' class='chk' name='pw_ck'>\r\n");
      out.write("		<div class='invalid'>비밀번호를 다시 입력하세요</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th><span>*</span>성별</th>\r\n");
      out.write("	<td><label>\r\n");
      out.write("			<input type='radio' name='gender' checked value='남'>남\r\n");
      out.write("		</label>\r\n");
      out.write("		<label>\r\n");
      out.write("			<input type='radio' name='gender' value='여'>여\r\n");
      out.write("		</label>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th><span>*</span>이메일</th>\r\n");
      out.write("	<td><input type='text' class='chk' name='email'>\r\n");
      out.write("		<div class='invalid'>이메일을 입력하세요</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th>프로필이미지</th>\r\n");
      out.write("	<td><div class='align'>\r\n");
      out.write("		<label>\r\n");
      out.write("			<input type='file' name='file' accept=\"image/*\" id='attach-file'>\r\n");
      out.write("			<a><i class=\"font-img-b fa-solid fa-file-circle-plus\"></i></a>\r\n");
      out.write("		</label>\r\n");
      out.write("		<span id='preview'></span>\r\n");
      out.write("		<a id='delete-file'><i class=\"font-img-r fa-regular fa-trash-can\"></i></a>\r\n");
      out.write("		</div>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th>생년월일</th>\r\n");
      out.write("	<td><input type='text' name='birth' class='date' readonly>\r\n");
      out.write("		<a id='btn-delete'><i class=\"font-img-r fa-regular fa-circle-xmark\"></i></a>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th>전화번호</th>\r\n");
      out.write("	<td><input type='text' name='phone' maxlength=\"13\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><th>주소</th>\r\n");
      out.write("	<td><a class='btn-fill btn-post'>우편번호찾기</a>\r\n");
      out.write("		<input type='text' name='post' class='w-px60' readonly>\r\n");
      out.write("		<input type='text' name='address' class='full' readonly>\r\n");
      out.write("		<input type='text' name='address' class='full'>\r\n");
      out.write("	</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");
      out.write("<div class='btnSet'>\r\n");
      out.write("<a class='btn-fill btn-join'>회원가입</a>\r\n");
      out.write("</div>\r\n");
      out.write("<script src='js/member_check.js?");
      out.print(new java.util.Date() );
      out.write("'></script>\r\n");
      out.write("<script>\r\n");
      out.write("$('.btn-id').click(function(){\r\n");
      out.write("	id_check();\r\n");
      out.write("});\r\n");
      out.write("//아이디 중복확인\r\n");
      out.write("function id_check(){\r\n");
      out.write("	//입력유효성확인\r\n");
      out.write("	var $id = $('[name=id]');\r\n");
      out.write("		\r\n");
      out.write("	if( $id.hasClass('chked') ) return;\r\n");
      out.write("	\r\n");
      out.write("	var status = member.tag_status( $id );\r\n");
      out.write("	if( status.code=='invalid' ){\r\n");
      out.write("		alert('아이디 중복확인 불필요\\n' + status.desc );\r\n");
      out.write("		$id.focus();\r\n");
      out.write("		return;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//해당 아이디가 DB에 존재하는지 확인\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: 'id_check',\r\n");
      out.write("		data : { id: $id.val() },\r\n");
      out.write("		success: function( response ){\r\n");
      out.write("			//false: DB에 존재하지 않는 아이디\r\n");
      out.write("			console.log( response );\r\n");
      out.write("			response = response ? member.id.unUsable : member.id.usable;\r\n");
      out.write("			$id.siblings('div').text( response.desc )\r\n");
      out.write("				.removeClass().addClass( response.code );\r\n");
      out.write("			$id.addClass('chked');\r\n");
      out.write("			\r\n");
      out.write("		},error: function(req, text){\r\n");
      out.write("			alert(text+':'+req.status)\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$('.chk').on('keyup', function( e ){\r\n");
      out.write("	if( $(this).attr('name')=='id' ){\r\n");
      out.write("		if( e.keyCode==13 ) id_check();\r\n");
      out.write("		$(this).removeClass('chked');		\r\n");
      out.write("	}\r\n");
      out.write("	var status = member.tag_status( $(this) );\r\n");
      out.write("	$(this).siblings('div').text( status.desc )\r\n");
      out.write("				.removeClass().addClass( status.code );\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$('.btn-join').click(function(){\r\n");
      out.write("	if( $('[name=name]').val()=='' ){\r\n");
      out.write("		alert('이름을 입력하세요!');\r\n");
      out.write("		$('[name=name]').focus();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	//중복확인O + 이미 사용중\r\n");
      out.write("	var _id = $('[name=id]');\r\n");
      out.write("	if( _id.hasClass('chked') ){\r\n");
      out.write("		if( _id.siblings('div').hasClass('invalid') ){\r\n");
      out.write("			alert('회원가입 불가\\n' + member.id.unUsable.desc);\r\n");
      out.write("			_id.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}		\r\n");
      out.write("	}else{\r\n");
      out.write("	//중복확인X\r\n");
      out.write("		if( tagIsInvalid( _id ) ) return;\r\n");
      out.write("		else{\r\n");
      out.write("			alert('회원가입 불가\\n' + member.id.valid.desc );\r\n");
      out.write("			_id.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	if( tagIsInvalid( $('[name=pw]') ) ) return;\r\n");
      out.write("	if( tagIsInvalid( $('[name=pw_ck]') ) ) return;\r\n");
      out.write("	if( tagIsInvalid( $('[name=email]') ) ) return;\r\n");
      out.write("	\r\n");
      out.write("	$('form').submit();\r\n");
      out.write("});\r\n");
      out.write("//태그의 입력값이 유효하지 않는지 확인할 함수\r\n");
      out.write("function tagIsInvalid( tag ){\r\n");
      out.write("	var status = member.tag_status( tag );\r\n");
      out.write("	if( status.code=='invalid' ){\r\n");
      out.write("		alert( '회원가입 불가\\n' +  status.desc );\r\n");
      out.write("		tag.focus();\r\n");
      out.write("		return true;\r\n");
      out.write("	}else\r\n");
      out.write("		return false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 만13세이상 회원가입하도록 생년월일 선택 날짜를 제한  */\r\n");
      out.write("var today = new Date();\r\n");
      out.write("var endDay = new Date( today.getFullYear()-13, today.getMonth()\r\n");
      out.write("						, today.getDate()-1 );\r\n");
      out.write("var range = today.getFullYear() - 80 + \":\" + endDay.getFullYear();						\r\n");
      out.write("$('.date').datepicker({\r\n");
      out.write("	maxDate: endDay,\r\n");
      out.write("	yearRange: range\r\n");
      out.write("});					\r\n");
      out.write(" \r\n");
      out.write("$('.date').change(function(){\r\n");
      out.write("	$(this).next().css('display', 'inline')\r\n");
      out.write("});\r\n");
      out.write("$('#btn-delete').click(function(){\r\n");
      out.write("	$('.date').val('');\r\n");
      out.write("	$(this).css('display', 'none')\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$('.btn-post').on('click', function(){\r\n");
      out.write("	new daum.Postcode({\r\n");
      out.write("        oncomplete: function(data) {\r\n");
      out.write("        	console.log(data);\r\n");
      out.write("        	$('[name=post]').val( data.zonecode );\r\n");
      out.write("        	\r\n");
      out.write("        	var address\r\n");
      out.write("        		= data.userSelectedType=='R' \r\n");
      out.write("        		? data.roadAddress : data.jibunAddress;\r\n");
      out.write("        	if( data.buildingName!='' )\r\n");
      out.write("        		address += ' ('+data.buildingName + ')';\r\n");
      out.write("        	\r\n");
      out.write("			$('[name=address]:eq(0)').val( address );\r\n");
      out.write("			//$('[name=address]').eq(0).val( address );\r\n");
      out.write("        	\r\n");
      out.write("        }\r\n");
      out.write("    }).open();\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
